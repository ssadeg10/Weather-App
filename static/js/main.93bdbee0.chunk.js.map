{"version":3,"sources":["components/Form.js","components/Display.js","App.js","serviceWorker.js","index.js"],"names":["Form","id","onSubmit","this","props","getWeatherData","class","type","placeholder","value","React","Component","Display","city","country","icon","alt","src","temperature","description","humidity","error","API_KEY","App","state","undefined","e","a","console","log","preventDefault","target","elements","unit","fetch","api_call","json","data","setState","main","temp","name","sys","weather","TypeError","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.93bdbee0.chunk.js","sourcesContent":["import React from 'react';\n\nclass Form extends React.Component{\n    render(){\n        return(\n        <form id='head' onSubmit={this.props.getWeatherData}>\n            <input class='input' id='input' type=\"text\" placeholder=\"City (e.g. Phoenix)\" id='city'></input>\n            <input class='input' id='input' type=\"text\" placeholder=\"Country (e.g. US)\" id='country'></input>\n            <select class='input' id='unit'>\n                <option id='f' value=\"imperial\">°F</option>\n                <option id='c' value=\"metric\">°C</option>\n            </select>\n            <button class='input' type='submit'>Submit</button>\n        </form>\n        );\n    }\n}\nexport default Form;","import React from 'react';\n\nclass Display extends React.Component{\n    render(){\n        return(\n            <div>\n                <br/>\n                {this.props.city && this.props.country && <p id='location'>{this.props.city}, {this.props.country}</p>}\n                <div id='horizontal'>\n                {this.props.icon && \n                    <img id='img' alt=\"\" src={`http://openweathermap.org/img/wn/${this.props.icon}@2x.png`}></img> \n                }\n                {this.props.temperature && <p id='temp'>{this.props.temperature}°</p>}\n                {this.props.description && <p id='description'>{this.props.description}</p>}\n                {this.props.humidity && <p>{this.props.humidity}% Humidity</p>}\n                </div>\n                {this.props.error && <p id='error'>{this.props.error}</p>}\n            </div>\n        );\n    }\n}\nexport default Display;","import React from 'react';\nimport './App.css';\nimport Form from './components/Form';\nimport Display from './components/Display';\n\nconst API_KEY = \"2a9127b69bee49c15901ab8978d2c912\";\n\nclass App extends React.Component{\n  state = { // Default\n    temperature: undefined,\n    city: undefined,\n    country: undefined,\n    humidity: undefined,\n    description: undefined,\n    icon: undefined,\n    error: undefined\n  }\n\n  getWeatherData = async (e) => {\n    console.log(\"method called\");\n    e.preventDefault();\n\n    const city = e.target.elements.city.value;\n    const country = e.target.elements.country.value;\n    const unit = e.target.elements.unit.value;\n\n    const api_call = await \n      fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_KEY}&units=${unit}`);\n    \n    const data = await api_call.json(); // Convert data -> JSON => const 'data'\n    console.log(data);\n    try{\n    if(city && country){\n      console.log(data);\n      this.setState({ // Set states w/ data\n        temperature: data.main.temp,\n        city: data.name,\n        country: data.sys.country,\n        humidity: data.main.humidity,\n        description: data.weather[0].description,\n        icon: data.weather[0].icon,\n        error: \"\"\n       });\n    } else {\n      this.setState({ // Set states due to error\n        temperature: undefined,\n        city: undefined,\n        country: undefined,\n        humidity: undefined,\n        description: undefined,\n        icon: undefined,\n        error: \"Field(s) not filled in correctly\"\n       });\n    }\n  } catch(TypeError) {\n    this.setState({ // Set states due to error\n      temperature: undefined,\n      city: undefined,\n      country: undefined,\n      humidity: undefined,\n      description: undefined,\n      icon: undefined,\n      error: \"Improper city/country\"\n     });\n  }\n    console.log(\"end of method\");\n  }\n\n  render(){\n    return(\n      <div className=\"App\">\n      <h2 id='head'>Weather App</h2>\n      <Form getWeatherData={this.getWeatherData}/>\n      <br/>\n      <Display \n        temperature = {this.state.temperature}\n        city = {this.state.city}\n        country = {this.state.country}\n        humidity = {this.state.humidity}\n        description = {this.state.description}\n        icon = {this.state.icon}\n        error = {this.state.error}\n      />\n    </div>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}